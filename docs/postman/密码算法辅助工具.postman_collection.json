{
	"info": {
		"_postman_id": "fa04ac92-1630-438b-bc97-9021ea95a5d8",
		"name": "密码算法辅助工具",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1. 国密算法",
			"item": [
				{
					"name": "1.0 sm2生成密钥对",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"SM2 generateKeyPair Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    pm.globals.set(\"sm2_pub_key\", jsonData.payload.publickey);\r",
									"    pm.globals.set(\"sm2_priv_key\", jsonData.payload.privatekey);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_BASE}}/alg/generateKeyPair",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"alg",
								"generateKeyPair"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.1 sm2签名",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"SM2 sign Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    pm.globals.set(\"sm2_sign_r\", jsonData.payload.sign_r);\r",
									"    pm.globals.set(\"sm2_sign_s\", jsonData.payload.sign_s);\r",
									"    pm.globals.set(\"sm2_sign_rs\", jsonData.payload.sign_r + jsonData.payload.sign_s);\r",
									"    pm.globals.set(\"sm2_sign_asn1\", jsonData.payload.asn1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_BASE}}/alg/sm2sign?privatekey={{sm2_priv_key}}&srchex={{PLAIN_HEX}}",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"alg",
								"sm2sign"
							],
							"query": [
								{
									"key": "privatekey",
									"value": "{{sm2_priv_key}}"
								},
								{
									"key": "srchex",
									"value": "{{PLAIN_HEX}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "1.2 sm2验签",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_BASE}}/alg/sm2verify?publickey={{sm2_pub_key}}&srchex={{PLAIN_HEX}}&signhex={{sm2_sign_rs}}",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"alg",
								"sm2verify"
							],
							"query": [
								{
									"key": "publickey",
									"value": "{{sm2_pub_key}}"
								},
								{
									"key": "srchex",
									"value": "{{PLAIN_HEX}}"
								},
								{
									"key": "signhex",
									"value": "{{sm2_sign_rs}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "1.3 sm2加密",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"SM2 encrypt Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    pm.globals.set(\"sm2_cipher\", jsonData.payload.cipherText);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_BASE}}/alg/sm2enc?publickey={{sm2_pub_key}}&plainhex={{PLAIN_HEX}}&cipher_format=c1c3c2",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"alg",
								"sm2enc"
							],
							"query": [
								{
									"key": "publickey",
									"value": "{{sm2_pub_key}}"
								},
								{
									"key": "plainhex",
									"value": "{{PLAIN_HEX}}"
								},
								{
									"key": "cipher_format",
									"value": "c1c3c2",
									"description": "c1c3c2或c1c2c3，不指定时默认c1c3c2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "1.4 sm2解密",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_BASE}}/alg/sm2dec?privatekey={{sm2_priv_key}}&cipherhex={{sm2_cipher}}&cipher_format=c1c3c2",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"alg",
								"sm2dec"
							],
							"query": [
								{
									"key": "privatekey",
									"value": "{{sm2_priv_key}}"
								},
								{
									"key": "cipherhex",
									"value": "{{sm2_cipher}}"
								},
								{
									"key": "cipher_format",
									"value": "c1c3c2",
									"description": "c1c3c2或c1c2c3，不指定时默认c1c3c2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "1.5 sm3摘要",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_BASE}}/alg/sm3digest?srchex={{PLAIN_HEX}}",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"alg",
								"sm3digest"
							],
							"query": [
								{
									"key": "srchex",
									"value": "{{PLAIN_HEX}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "1.6 sm4生成密钥",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"SM4 generateKey Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    pm.globals.set(\"sm4_crypt_key\", jsonData.payload.key);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_BASE}}/alg/sm4generatekey",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"alg",
								"sm4generatekey"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.7 sm4加密",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"SM4 ENCRYPT Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    pm.globals.set(\"sm4_cipher\", jsonData.payload.cipherText);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_BASE}}/alg/sm4enc?key={{sm4_crypt_key}}&plainhex={{PLAIN_HEX}}&mode=ECB&iv={{IV}}",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"alg",
								"sm4enc"
							],
							"query": [
								{
									"key": "key",
									"value": "{{sm4_crypt_key}}"
								},
								{
									"key": "plainhex",
									"value": "{{PLAIN_HEX}}"
								},
								{
									"key": "mode",
									"value": "ECB",
									"description": "ECB / CBC"
								},
								{
									"key": "iv",
									"value": "{{IV}}",
									"description": "默认：30303030303030303030303030303030"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "1.8 sm4解密",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_BASE}}/alg/sm4dec?key={{sm4_crypt_key}}&cipherhex={{sm4_cipher}}&mode=ECB&iv={{IV}}",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"alg",
								"sm4dec"
							],
							"query": [
								{
									"key": "key",
									"value": "{{sm4_crypt_key}}"
								},
								{
									"key": "cipherhex",
									"value": "{{sm4_cipher}}"
								},
								{
									"key": "mode",
									"value": "ECB",
									"description": "ECB / CBC"
								},
								{
									"key": "iv",
									"value": "{{IV}}",
									"description": "默认：30303030303030303030303030303030"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "1.9 string2hex",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_BASE}}/alg/string2hex?string=hello world",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"alg",
								"string2hex"
							],
							"query": [
								{
									"key": "string",
									"value": "hello world"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "1.10 hex2string",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_BASE}}/alg/hex2string?hex=68656c6c6f20776f726c64",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"alg",
								"hex2string"
							],
							"query": [
								{
									"key": "hex",
									"value": "68656c6c6f20776f726c64"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "2. 对称加密",
			"item": [
				{
					"name": "2.1 生成密钥",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"sym_crypt generate_key Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    pm.globals.set(\"sym_key\", jsonData.payload.key_hex);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_BASE}}/crypto/sym-alg/generate-key?alg={{SYM_ALG}}&key_bits=128",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"crypto",
								"sym-alg",
								"generate-key"
							],
							"query": [
								{
									"key": "alg",
									"value": "{{SYM_ALG}}",
									"description": "{{SYM_ALG}}，AES、DES、DESede"
								},
								{
									"key": "key_bits",
									"value": "128"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "2.2 加密",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"sym_crypt encrypt Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    pm.globals.set(\"sym_cipher\", jsonData.payload.cipher_hex);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "alg",
									"value": "{{SYM_ALG}}",
									"description": "{{SYM_ALG}}，以下其一：AES、DES、DESede、SM4",
									"type": "text"
								},
								{
									"key": "mode",
									"value": "{{SYM_MODE}}",
									"description": "{{SYM_MODE}}，以下其一：None、CBC、CFB、CTR、CTS、ECB、OFB",
									"type": "text"
								},
								{
									"key": "padding",
									"value": "{{SYM_PAD}}",
									"description": "{{SYM_PAD}}，以下其一：None、Zero、ISO10126、PKCS5",
									"type": "text"
								},
								{
									"key": "key",
									"value": "{{sym_key}}",
									"description": "{{sym_key}}",
									"type": "text"
								},
								{
									"key": "iv",
									"value": "{{IV}}",
									"description": "{{IV}}",
									"type": "text"
								},
								{
									"key": "plain_hex",
									"value": "00112233445566778899aabbccddeeff",
									"description": "{{PLAIN_HEX}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/crypto/sym-alg/encrypt",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"crypto",
								"sym-alg",
								"encrypt"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.2 解密",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"sym_crypt decrypt Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    pm.globals.set(\"sym_plain\", jsonData.payload.plain);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "alg",
									"value": "{{SYM_ALG}}",
									"description": "{{SYM_ALG}}，以下其一：AES、DES、DESede、SM4",
									"type": "text"
								},
								{
									"key": "mode",
									"value": "{{SYM_MODE}}",
									"description": "{{SYM_MODE}}，以下其一：None、CBC、CFB、CTR、CTS、ECB、OFB",
									"type": "text"
								},
								{
									"key": "padding",
									"value": "{{SYM_PAD}}",
									"description": "{{SYM_PAD}}，以下其一：None、Zero、ISO10126、PKCS5",
									"type": "text"
								},
								{
									"key": "key",
									"value": "{{sym_key}}",
									"description": "{{sym_key}}",
									"type": "text"
								},
								{
									"key": "iv",
									"value": "{{IV}}",
									"description": "{{IV}}",
									"type": "text"
								},
								{
									"key": "cipher_hex",
									"value": "{{sym_cipher}}",
									"description": "{{sym_cipher}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/crypto/sym-alg/decrypt",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"crypto",
								"sym-alg",
								"decrypt"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.4 RC4加密",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ext_sym_crypt encrypt Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    pm.globals.set(\"sym_cipher\", jsonData.payload.cipher_hex);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"EXT_SYM_KEY\", \"hello \");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "key",
									"value": "{{EXT_SYM_KEY}}",
									"description": "{{EXT_SYM_KEY}}",
									"type": "text"
								},
								{
									"key": "plain_hex",
									"value": "00112233445566778899aabbccddee",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/crypto/sym-alg/rc4/encrypt",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"crypto",
								"sym-alg",
								"rc4",
								"encrypt"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.5 RC4解密",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "key",
									"value": "{{EXT_SYM_KEY}}",
									"description": "{{EXT_SYM_KEY}}",
									"type": "text"
								},
								{
									"key": "cipher_hex",
									"value": "{{sym_cipher}}",
									"description": "{{sym_cipher}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/crypto/sym-alg/rc4/decrypt",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"crypto",
								"sym-alg",
								"rc4",
								"decrypt"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.6 Vigenere加密",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ext_sym_crypt encrypt Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    pm.globals.set(\"sym_cipher\", jsonData.payload.cipher_str);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"EXT_SYM_KEY\", \"hello kid111222\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "key",
									"value": "{{EXT_SYM_KEY}}",
									"description": "{{EXT_SYM_KEY}}",
									"type": "text"
								},
								{
									"key": "plain_str",
									"value": "what is the matter?",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/crypto/sym-alg/vigenere/encrypt",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"crypto",
								"sym-alg",
								"vigenere",
								"encrypt"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.7 Vigenere解密",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "key",
									"value": "{{EXT_SYM_KEY}}",
									"description": "{{EXT_SYM_KEY}}",
									"type": "text"
								},
								{
									"key": "cipher_str",
									"value": "{{sym_cipher}}",
									"description": "{{sym_cipher}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/crypto/sym-alg/vigenere/decrypt",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"crypto",
								"sym-alg",
								"vigenere",
								"decrypt"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.8 生成PBE盐",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"sym_crypt PBE_init_salt Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    pm.globals.set(\"PBE_SALT\", jsonData.payload.salt_hex);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"PBE_ALG\", \"PBEWithMD5AndDES\");\r",
									"pm.globals.set(\"PASSWORD\", \"2234567\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_BASE}}/crypto/sym-alg/pbe/init-salt?alg={{PBE_ALG}}&salt_size=8",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"crypto",
								"sym-alg",
								"pbe",
								"init-salt"
							],
							"query": [
								{
									"key": "alg",
									"value": "{{PBE_ALG}}",
									"description": "{{PBE_ALG}}，以下之一：PBEWithMD5AndDES，PBEWithSHA1AndDESede，PBEWithSHA1AndRC2_40"
								},
								{
									"key": "salt_size",
									"value": "8"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "2.9 PBE加密",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ext_sym_crypt encrypt Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    pm.globals.set(\"sym_cipher\", jsonData.payload.cipher_hex);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "alg",
									"value": "{{PBE_ALG}}",
									"description": "{{PBE_ALG}}，以下之一：PBEWithMD5AndDES，PBEWithSHA1AndDESede，PBEWithSHA1AndRC2_40",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"description": "{{PASSWORD}}",
									"type": "text"
								},
								{
									"key": "salt_hex",
									"value": "{{PBE_SALT}}",
									"description": "{{PBE_SALT}}",
									"type": "text"
								},
								{
									"key": "plain_hex",
									"value": "1234",
									"description": "{{PLAIN_HEX}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/crypto/sym-alg/pbe/encrypt",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"crypto",
								"sym-alg",
								"pbe",
								"encrypt"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.10 PBE解密",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "alg",
									"value": "{{PBE_ALG}}",
									"description": "{{PBE_ALG}}，以下之一：PBEWithMD5AndDES，PBEWithSHA1AndDESede，PBEWithSHA1AndRC2_40",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"description": "{{PASSWORD}}",
									"type": "text"
								},
								{
									"key": "salt_hex",
									"value": "{{PBE_SALT}}",
									"description": "{{PBE_SALT}}",
									"type": "text"
								},
								{
									"key": "cipher_hex",
									"value": "{{sym_cipher}}",
									"description": "{{sym_cipher}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/crypto/sym-alg/pbe/decrypt",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"crypto",
								"sym-alg",
								"pbe",
								"decrypt"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "3. 非对称加密",
			"item": []
		},
		{
			"name": "4. 摘要算法",
			"item": [
				{
					"name": "4.1 hash摘要",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"SM2 sign Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    pm.environment.set(\"MD5\", jsonData.payload.MD5);\r",
									"    pm.environment.set(\"SHA1\", jsonData.payload.SHA1);\r",
									"    pm.environment.set(\"SHA256\", jsonData.payload.SHA256);\r",
									"    pm.environment.set(\"SHA384\", jsonData.payload.SHA384);\r",
									"    pm.environment.set(\"SHA512\", jsonData.payload.SHA512);\r",
									"    pm.environment.set(\"SM3\", jsonData.payload.SM3);\r",
									"    \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "src_hex",
									"value": "{{PLAIN_HEX}}",
									"description": "{{PLAIN_HEX}}",
									"type": "text"
								},
								{
									"key": "alg",
									"value": "MD5,SHA1,SHA256,SHA384,SHA512,SM3",
									"description": "MD5,SHA1,SHA256,SHA384,SHA512,SM3  多个，用逗号分隔",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/crypto/hash",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"crypto",
								"hash"
							],
							"query": [
								{
									"key": "src_hex",
									"value": "{{PLAIN_HEX}}",
									"disabled": true
								},
								{
									"key": "alg",
									"value": "MD5,SHA1,SHA256,SHA384,SHA512,SM3",
									"description": "MD5,SHA1,SHA256,SHA384,SHA512,SM3  多个，用逗号分隔",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "5. 编解码格式转换",
			"item": [
				{
					"name": "5.1 Base64编码",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"base64 encode Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    pm.globals.set(\"b64_encode_str\", jsonData.payload.encode_str);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "plain_hex",
									"value": "{{PLAIN_HEX}}",
									"description": "16进制的原文数据，二选一",
									"type": "text"
								},
								{
									"key": "plain_str",
									"value": "123456",
									"description": "原文字符串，二选一",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/transcoding/b64/encode",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"transcoding",
								"b64",
								"encode"
							]
						}
					},
					"response": []
				},
				{
					"name": "5.2 Base64解码",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"base64 decode Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    pm.environment.set(\"b64_decode_hex\", jsonData.payload.decode_hex);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "code_str",
									"value": "{{b64_encode_str}}",
									"description": "base64编码字符串",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/transcoding/b64/decode",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"transcoding",
								"b64",
								"decode"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "6. 其它辅助",
			"item": [
				{
					"name": "6.1 ServerTime 服务器时间",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"systime\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    pm.environment.set(\"time\", jsonData.payload.time);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_BASE}}/aux/system-time",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"aux",
								"system-time"
							]
						}
					},
					"response": []
				},
				{
					"name": "6.2 生成UUID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"uuid\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    pm.environment.set(\"uuid\", jsonData.payload.uuid);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_BASE}}/aux/uuid",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"aux",
								"uuid"
							],
							"query": [
								{
									"key": "simple",
									"value": "1",
									"description": "可选参数，",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "6.3 random生成随机数",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"SM4 generateKey Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    pm.environment.set(\"sm4_crypt_key\", jsonData.payload.key);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_BASE}}/aux/random?size=8",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"aux",
								"random"
							],
							"query": [
								{
									"key": "size",
									"value": "8",
									"description": "取值范围应为1-256字节"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "6.4 time2stamp 时间格式转换",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"SM4 generateKey Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    pm.environment.set(\"sm4_crypt_key\", jsonData.payload.key);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_BASE}}/aux/time-convert/time2stamp?time=2021-01-20 16:38:55",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"aux",
								"time-convert",
								"time2stamp"
							],
							"query": [
								{
									"key": "time",
									"value": "2021-01-20 16:38:55",
									"description": "2021-01-20 16:38:50"
								},
								{
									"key": "stamp",
									"value": null,
									"description": "时间戳格式原文，二选一  （1611131930）",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "6.4 timeconvert 时间格式转换 Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"SM4 generateKey Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    pm.environment.set(\"sm4_crypt_key\", jsonData.payload.key);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_BASE}}/aux/time-convert/stamp2time?stamp=1611131935000",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"aux",
								"time-convert",
								"stamp2time"
							],
							"query": [
								{
									"key": "time",
									"value": "2021-01-20 16:38:50",
									"disabled": true
								},
								{
									"key": "stamp",
									"value": "1611131935000",
									"description": "时间戳格式原文，二选一  （1611131930）"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "API_BASE",
			"value": "localhost:10501"
		},
		{
			"key": "PLAIN_HEX",
			"value": "0653F3748DFD938FE83935800FF3F526B85C30C2331DD56FCB1794AA99F2A416"
		},
		{
			"key": "IV",
			"value": "30303030303030303030303030303030"
		},
		{
			"key": "IV8",
			"value": "3030303030303030"
		},
		{
			"key": "IV32",
			"value": "3030303030303030303030303030303030303030303030303030303030303030"
		},
		{
			"key": "IV24",
			"value": "303030303030303030303030303030303030303030303030"
		},
		{
			"key": "SYM_ALG",
			"value": "AES"
		},
		{
			"key": "SYM_MODE",
			"value": "CTR"
		},
		{
			"key": "SYM_PAD",
			"value": "Zero"
		}
	]
}