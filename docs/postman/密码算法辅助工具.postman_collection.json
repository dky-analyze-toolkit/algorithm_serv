{
	"info": {
		"_postman_id": "b0fbf604-7ce3-4196-a943-c9663e17db0d",
		"name": "密码算法辅助工具",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1. 国密算法",
			"item": [
				{
					"name": "1.0 sm2生成密钥对",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"SM2 generateKeyPair Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    pm.globals.set(\"sm2_pub_key\", jsonData.payload.publickey);\r",
									"    pm.globals.set(\"sm2_priv_key\", jsonData.payload.privatekey);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_BASE}}/alg/generateKeyPair",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"alg",
								"generateKeyPair"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.1 sm2签名",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"SM2 sign Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    pm.globals.set(\"sm2_sign_r\", jsonData.payload.sign_r);\r",
									"    pm.globals.set(\"sm2_sign_s\", jsonData.payload.sign_s);\r",
									"    pm.globals.set(\"sm2_sign_rs\", jsonData.payload.sign_r + jsonData.payload.sign_s);\r",
									"    pm.globals.set(\"sm2_sign_asn1\", jsonData.payload.asn1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_BASE}}/alg/sm2sign?privatekey={{sm2_priv_key}}&srchex={{PLAIN_HEX}}&user_id=ALICE123@YAHOO.COM",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"alg",
								"sm2sign"
							],
							"query": [
								{
									"key": "privatekey",
									"value": "{{sm2_priv_key}}",
									"description": "{{sm2_priv_key}}"
								},
								{
									"key": "srchex",
									"value": "{{PLAIN_HEX}}",
									"description": "{{PLAIN_HEX}}"
								},
								{
									"key": "user_id",
									"value": "ALICE123@YAHOO.COM",
									"description": "可标识ID，例如：ALICE123@YAHOO.COM。无此参数时，系统默认值：1234567812345678"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "1.2 sm2验签",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_BASE}}/alg/sm2verify?publickey={{sm2_pub_key}}&srchex={{PLAIN_HEX}}&signhex={{sm2_sign_rs}}&user_id=ALICE123@YAHOO.COM",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"alg",
								"sm2verify"
							],
							"query": [
								{
									"key": "publickey",
									"value": "{{sm2_pub_key}}",
									"description": "{{sm2_pub_key}}"
								},
								{
									"key": "srchex",
									"value": "{{PLAIN_HEX}}",
									"description": "{{PLAIN_HEX}}"
								},
								{
									"key": "signhex",
									"value": "{{sm2_sign_rs}}",
									"description": "{{sm2_sign_rs}}"
								},
								{
									"key": "user_id",
									"value": "ALICE123@YAHOO.COM",
									"description": "可标识ID，例如：ALICE123@YAHOO.COM。无此参数时，系统默认值：1234567812345678"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "1.3 sm2加密",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"SM2 encrypt Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    pm.globals.set(\"sm2_cipher\", jsonData.payload.cipherText);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_BASE}}/alg/sm2enc?publickey={{sm2_pub_key}}&plainhex={{PLAIN_HEX}}&cipher_format=c1c3c2",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"alg",
								"sm2enc"
							],
							"query": [
								{
									"key": "publickey",
									"value": "{{sm2_pub_key}}"
								},
								{
									"key": "plainhex",
									"value": "{{PLAIN_HEX}}"
								},
								{
									"key": "cipher_format",
									"value": "c1c3c2",
									"description": "c1c3c2或c1c2c3，不指定时默认c1c3c2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "1.4 sm2解密",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_BASE}}/alg/sm2dec?privatekey={{sm2_priv_key}}&cipherhex={{sm2_cipher}}&cipher_format=c1c3c2",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"alg",
								"sm2dec"
							],
							"query": [
								{
									"key": "privatekey",
									"value": "{{sm2_priv_key}}"
								},
								{
									"key": "cipherhex",
									"value": "{{sm2_cipher}}"
								},
								{
									"key": "cipher_format",
									"value": "c1c3c2",
									"description": "c1c3c2或c1c2c3，不指定时默认c1c3c2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "1.5 sm3摘要",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_BASE}}/alg/sm3digest?srchex={{PLAIN_HEX}}",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"alg",
								"sm3digest"
							],
							"query": [
								{
									"key": "srchex",
									"value": "{{PLAIN_HEX}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "1.6 sm4生成密钥",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"SM4 generateKey Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    pm.globals.set(\"sm4_crypt_key\", jsonData.payload.key);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_BASE}}/alg/sm4generatekey",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"alg",
								"sm4generatekey"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.7 sm4加密",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"SM4 ENCRYPT Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    pm.globals.set(\"sm4_cipher\", jsonData.payload.cipherText);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_BASE}}/alg/sm4enc?key=0123456789abcdeffedcba9876543210&plainhex=0123456789abcdeffedcba9876543210&mode=ECB&iv={{IV}}",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"alg",
								"sm4enc"
							],
							"query": [
								{
									"key": "key",
									"value": "0123456789abcdeffedcba9876543210",
									"description": "{{sm4_crypt_key}}，测试：0123456789abcdeffedcba9876543210"
								},
								{
									"key": "plainhex",
									"value": "0123456789abcdeffedcba9876543210",
									"description": "{{PLAIN_HEX}}，测试：0123456789abcdeffedcba9876543210"
								},
								{
									"key": "mode",
									"value": "ECB",
									"description": "ECB / CBC"
								},
								{
									"key": "iv",
									"value": "{{IV}}",
									"description": "默认：30303030303030303030303030303030"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "1.8 sm4解密",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_BASE}}/alg/sm4dec?key={{sm4_crypt_key}}&cipherhex={{sm4_cipher}}&mode=ECB&iv={{IV}}",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"alg",
								"sm4dec"
							],
							"query": [
								{
									"key": "key",
									"value": "{{sm4_crypt_key}}"
								},
								{
									"key": "cipherhex",
									"value": "{{sm4_cipher}}"
								},
								{
									"key": "mode",
									"value": "ECB",
									"description": "ECB / CBC"
								},
								{
									"key": "iv",
									"value": "{{IV}}",
									"description": "默认：30303030303030303030303030303030"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "1.9 string2hex",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_BASE}}/alg/string2hex?string=hello world",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"alg",
								"string2hex"
							],
							"query": [
								{
									"key": "string",
									"value": "hello world"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "1.10 hex2string",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_BASE}}/alg/hex2string?hex=68656c6c6f20776f726c64",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"alg",
								"hex2string"
							],
							"query": [
								{
									"key": "hex",
									"value": "68656c6c6f20776f726c64"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "2. 对称加密",
			"item": [
				{
					"name": "2.1 生成密钥",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"sym_crypt generate_key Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    pm.globals.set(\"sym_key\", jsonData.payload.key_hex);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_BASE}}/crypto/sym-alg/generate-key?alg={{SYM_ALG}}&key_bits=128",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"crypto",
								"sym-alg",
								"generate-key"
							],
							"query": [
								{
									"key": "alg",
									"value": "{{SYM_ALG}}",
									"description": "{{SYM_ALG}}，AES、DES、DESede、SM4"
								},
								{
									"key": "key_bits",
									"value": "128"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "2.2 加密",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"sym_crypt encrypt Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    pm.globals.set(\"sym_cipher\", jsonData.payload.cipher_hex);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "alg",
									"value": "{{SYM_ALG}}",
									"description": "{{SYM_ALG}}，以下其一：AES、DES、DESede、SM4",
									"type": "text"
								},
								{
									"key": "mode",
									"value": "{{SYM_MODE}}",
									"description": "{{SYM_MODE}}，以下其一：None、CBC、CFB、CTR、CTS、ECB、OFB",
									"type": "text"
								},
								{
									"key": "padding",
									"value": "ISO10126",
									"description": "{{SYM_PAD}}，以下其一：None、Zero、ISO10126、PKCS5",
									"type": "text"
								},
								{
									"key": "key",
									"value": "{{sym_key}}",
									"description": "{{sym_key}}",
									"type": "text"
								},
								{
									"key": "iv",
									"value": "{{IV}}",
									"description": "{{IV}}",
									"type": "text"
								},
								{
									"key": "plain_hex",
									"value": "0123456789abcdeffedc",
									"description": "{{PLAIN_HEX}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/crypto/sym-alg/encrypt",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"crypto",
								"sym-alg",
								"encrypt"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.3 解密",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"sym_crypt decrypt Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    pm.globals.set(\"sym_plain\", jsonData.payload.plain_hex);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "alg",
									"value": "{{SYM_ALG}}",
									"description": "{{SYM_ALG}}，以下其一：AES、DES、DESede、SM4",
									"type": "text"
								},
								{
									"key": "mode",
									"value": "{{SYM_MODE}}",
									"description": "{{SYM_MODE}}，以下其一：None、CBC、CFB、CTR、CTS、ECB、OFB",
									"type": "text"
								},
								{
									"key": "padding",
									"value": "None",
									"description": "{{SYM_PAD}}，以下其一：None、Zero、ISO10126、PKCS5",
									"type": "text"
								},
								{
									"key": "key",
									"value": "{{sym_key}}",
									"description": "{{sym_key}}",
									"type": "text"
								},
								{
									"key": "iv",
									"value": "{{IV}}",
									"description": "{{IV}}",
									"type": "text"
								},
								{
									"key": "cipher_hex",
									"value": "{{sym_cipher}}",
									"description": "{{sym_cipher}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/crypto/sym-alg/decrypt",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"crypto",
								"sym-alg",
								"decrypt"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.4 RC4加密",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ext_sym_crypt encrypt Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    pm.globals.set(\"sym_cipher\", jsonData.payload.cipher_hex);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"EXT_SYM_KEY\", \"hello \");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "key",
									"value": "{{EXT_SYM_KEY}}",
									"description": "{{EXT_SYM_KEY}}",
									"type": "text"
								},
								{
									"key": "plain_hex",
									"value": "00112233445566778899aabbccddee",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/crypto/sym-alg/rc4/encrypt",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"crypto",
								"sym-alg",
								"rc4",
								"encrypt"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.5 RC4解密",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "key",
									"value": "{{EXT_SYM_KEY}}",
									"description": "{{EXT_SYM_KEY}}",
									"type": "text"
								},
								{
									"key": "cipher_hex",
									"value": "{{sym_cipher}}",
									"description": "{{sym_cipher}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/crypto/sym-alg/rc4/decrypt",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"crypto",
								"sym-alg",
								"rc4",
								"decrypt"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.6 Vigenere加密",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ext_sym_crypt encrypt Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    pm.globals.set(\"sym_cipher\", jsonData.payload.cipher_str);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"EXT_SYM_KEY\", \"hello kid111222\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "key",
									"value": "{{EXT_SYM_KEY}}",
									"description": "{{EXT_SYM_KEY}}",
									"type": "text"
								},
								{
									"key": "plain_str",
									"value": "what is the matter?",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/crypto/sym-alg/vigenere/encrypt",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"crypto",
								"sym-alg",
								"vigenere",
								"encrypt"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.7 Vigenere解密",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "key",
									"value": "{{EXT_SYM_KEY}}",
									"description": "{{EXT_SYM_KEY}}",
									"type": "text"
								},
								{
									"key": "cipher_str",
									"value": "{{sym_cipher}}",
									"description": "{{sym_cipher}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/crypto/sym-alg/vigenere/decrypt",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"crypto",
								"sym-alg",
								"vigenere",
								"decrypt"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.8 生成PBE盐",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"sym_crypt PBE_init_salt Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    pm.globals.set(\"PBE_SALT\", jsonData.payload.salt_hex);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"PBE_ALG\", \"PBEWithMD5AndDES\");\r",
									"pm.globals.set(\"PASSWORD\", \"2234567\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_BASE}}/crypto/sym-alg/pbe/init-salt?alg={{PBE_ALG}}&salt_size=8",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"crypto",
								"sym-alg",
								"pbe",
								"init-salt"
							],
							"query": [
								{
									"key": "alg",
									"value": "{{PBE_ALG}}",
									"description": "{{PBE_ALG}}，以下之一：PBEWithMD5AndDES，PBEWithSHA1AndDESede，PBEWithSHA1AndRC2_40"
								},
								{
									"key": "salt_size",
									"value": "8"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "2.9 PBE加密",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ext_sym_crypt encrypt Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    pm.globals.set(\"sym_cipher\", jsonData.payload.cipher_hex);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "alg",
									"value": "{{PBE_ALG}}",
									"description": "{{PBE_ALG}}，以下之一：PBEWithMD5AndDES，PBEWithSHA1AndDESede，PBEWithSHA1AndRC2_40",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"description": "{{PASSWORD}}",
									"type": "text"
								},
								{
									"key": "salt_hex",
									"value": "{{PBE_SALT}}",
									"description": "{{PBE_SALT}}",
									"type": "text"
								},
								{
									"key": "plain_hex",
									"value": "1234",
									"description": "{{PLAIN_HEX}}",
									"type": "text"
								},
								{
									"key": "iteration_count",
									"value": "100000",
									"description": "迭代次数，最大10000",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/crypto/sym-alg/pbe/encrypt",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"crypto",
								"sym-alg",
								"pbe",
								"encrypt"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.10 PBE解密",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "alg",
									"value": "{{PBE_ALG}}",
									"description": "{{PBE_ALG}}，以下之一：PBEWithMD5AndDES，PBEWithSHA1AndDESede，PBEWithSHA1AndRC2_40",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"description": "{{PASSWORD}}",
									"type": "text"
								},
								{
									"key": "salt_hex",
									"value": "{{PBE_SALT}}",
									"description": "{{PBE_SALT}}",
									"type": "text"
								},
								{
									"key": "cipher_hex",
									"value": "{{sym_cipher}}",
									"description": "{{sym_cipher}}",
									"type": "text"
								},
								{
									"key": "iteration_count",
									"value": "100000",
									"description": "迭代次数，最大10000",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/crypto/sym-alg/pbe/decrypt",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"crypto",
								"sym-alg",
								"pbe",
								"decrypt"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.11 循环加密",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"sym_crypt loopEncrypt Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    pm.globals.set(\"sym_cipher\", jsonData.payload.cipher_hex);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "alg",
									"value": "{{SYM_ALG}}",
									"description": "{{SYM_ALG}}，以下其一：AES、DES、DESede、SM4",
									"type": "text"
								},
								{
									"key": "key",
									"value": "{{sym_key}}",
									"description": "{{sym_key}}",
									"type": "text"
								},
								{
									"key": "plain_hex",
									"value": "0123456789abcdeffedcba9876543210",
									"description": "{{PLAIN_HEX}}",
									"type": "text"
								},
								{
									"key": "iteration_count",
									"value": "1000000",
									"description": "取值范围：1-1000000",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/crypto/sym-alg/kits/loop/encrypt",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"crypto",
								"sym-alg",
								"kits",
								"loop",
								"encrypt"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.12 循环解密",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"sym_crypt loopDecrypt Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    pm.globals.set(\"sym_plain\", jsonData.payload.plain_hex);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "alg",
									"value": "{{SYM_ALG}}",
									"description": "{{SYM_ALG}}，以下其一：AES、DES、DESede、SM4",
									"type": "text"
								},
								{
									"key": "key",
									"value": "{{sym_key}}",
									"description": "{{sym_key}}",
									"type": "text"
								},
								{
									"key": "cipher_hex",
									"value": "{{sym_cipher}}",
									"description": "{{sym_cipher}}",
									"type": "text"
								},
								{
									"key": "iteration_count",
									"value": "1000000",
									"description": "取值范围：1-1000000",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/crypto/sym-alg/kits/loop/decrypt",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"crypto",
								"sym-alg",
								"kits",
								"loop",
								"decrypt"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "3. 非对称加密",
			"item": [
				{
					"name": "3.1 生成RSA密钥",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"RSA generate_key Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    pm.globals.set(\"RSA_E\", jsonData.payload.rsa_e);\r",
									"    pm.globals.set(\"RSA_N\", jsonData.payload.rsa_n);\r",
									"    pm.globals.set(\"RSA_D\", jsonData.payload.rsa_d);\r",
									"    pm.globals.set(\"RSA_P\", jsonData.payload.rsa_p);\r",
									"    pm.globals.set(\"RSA_Q\", jsonData.payload.rsa_q);\r",
									"    pm.globals.set(\"RSA_PUB_KEY\", jsonData.payload.public_key_pem);\r",
									"    pm.globals.set(\"RSA_PRIV_KEY\", jsonData.payload.private_key_pem);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.globals.set(\"ASYM_ALG\", \"RSA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_BASE}}/crypto/asym-alg/rsa/generate-key?key_bits=32",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"crypto",
								"asym-alg",
								"rsa",
								"generate-key"
							],
							"query": [
								{
									"key": "key_bits",
									"value": "32",
									"description": "512, 1024, 2048, 4096，默认1024"
								},
								{
									"key": "rsa_e",
									"value": null,
									"description": "可选e，无此参数时，默认值：65537",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "3.2 PEM读取RSA密钥",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "pem",
									"value": "{{RSA_PUB_KEY}}",
									"description": "{{RSA_PUB_KEY}}、{{RSA_PRIV_KEY}}，自动识别",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/crypto/asym-alg/rsa/read-pem",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"crypto",
								"asym-alg",
								"rsa",
								"read-pem"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.3 RSA签名",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"RSA sign Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    pm.globals.set(\"RSA_SIGN_HEX\", jsonData.payload.signature_hex);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "sign_alg",
									"value": "SHA1",
									"description": "None、MD2、MD5、SHA1、SHA256、SHA384、SHA512",
									"type": "text"
								},
								{
									"key": "priv_key_pem",
									"value": "{{RSA_PRIV_KEY}}",
									"description": "{{RSA_PRIV_KEY}}",
									"type": "text"
								},
								{
									"key": "data_hex",
									"value": "112233",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/crypto/asym-alg/rsa/sign",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"crypto",
								"asym-alg",
								"rsa",
								"sign"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.4 RSA验签",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "sign_alg",
									"value": "SHA1",
									"description": "None、MD2、MD5、SHA1、SHA256、SHA384、SHA512",
									"type": "text"
								},
								{
									"key": "pub_key_pem",
									"value": "{{RSA_PUB_KEY}}",
									"description": "{{RSA_PUB_KEY}}",
									"type": "text"
								},
								{
									"key": "data_hex",
									"value": "112233",
									"type": "text"
								},
								{
									"key": "sign_hex",
									"value": "{{RSA_SIGN_HEX}}",
									"description": "{{RSA_SIGN_HEX}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/crypto/asym-alg/rsa/verify",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"crypto",
								"asym-alg",
								"rsa",
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.5 RSA加密",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"RSA encrypt Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    pm.globals.set(\"RSA_CIPHER_HEX\", jsonData.payload.cipher_hex);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "padding",
									"value": "PKCS1",
									"description": "None、Zero、PKCS1",
									"type": "text"
								},
								{
									"key": "pub_key_pem",
									"value": "{{RSA_PUB_KEY}}",
									"description": "{{RSA_PUB_KEY}}",
									"type": "text"
								},
								{
									"key": "plain_hex",
									"value": "112233",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/crypto/asym-alg/rsa/encrypt",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"crypto",
								"asym-alg",
								"rsa",
								"encrypt"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.6 RSA解密",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "padding",
									"value": "None",
									"description": "None、Zero、PKCS1",
									"type": "text"
								},
								{
									"key": "priv_key_pem",
									"value": "{{RSA_PRIV_KEY}}",
									"description": "{{RSA_PRIV_KEY}}",
									"type": "text"
								},
								{
									"key": "cipher_hex",
									"value": "{{RSA_CIPHER_HEX}}",
									"description": "{{RSA_CIPHER_HEX}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/crypto/asym-alg/rsa/decrypt",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"crypto",
								"asym-alg",
								"rsa",
								"decrypt"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.7 RSA分解d",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "rsa_n",
									"value": "{{RSA_N}}",
									"description": "{{RSA_N}}",
									"type": "text"
								},
								{
									"key": "rsa_e",
									"value": "{{RSA_E}}",
									"description": "{{RSA_E}}",
									"type": "text"
								},
								{
									"key": "rsa_d",
									"value": "{{RSA_D}}",
									"description": "{{RSA_D}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/crypto/asym-alg/rsa/attack-d",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"crypto",
								"asym-alg",
								"rsa",
								"attack-d"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "4. 摘要算法",
			"item": [
				{
					"name": "4.1 hash摘要",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"SM2 sign Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    pm.environment.set(\"MD5\", jsonData.payload.MD5);\r",
									"    pm.environment.set(\"SHA1\", jsonData.payload.SHA1);\r",
									"    pm.environment.set(\"SHA256\", jsonData.payload.SHA256);\r",
									"    pm.environment.set(\"SHA384\", jsonData.payload.SHA384);\r",
									"    pm.environment.set(\"SHA512\", jsonData.payload.SHA512);\r",
									"    pm.environment.set(\"SM3\", jsonData.payload.SM3);\r",
									"    \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "src_hex",
									"value": "{{PLAIN_HEX}}",
									"description": "{{PLAIN_HEX}}",
									"type": "text"
								},
								{
									"key": "alg",
									"value": "MD5,SHA1,SHA256,SHA384,SHA512,SM3",
									"description": "MD5,SHA1,SHA256,SHA384,SHA512,SM3  多个，用逗号分隔",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/crypto/hash",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"crypto",
								"hash"
							]
						}
					},
					"response": []
				},
				{
					"name": "4.2 Hmac",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"SM2 sign Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    pm.environment.set(\"MD5\", jsonData.payload.MD5);\r",
									"    pm.environment.set(\"SHA1\", jsonData.payload.SHA1);\r",
									"    pm.environment.set(\"SHA256\", jsonData.payload.SHA256);\r",
									"    pm.environment.set(\"SHA384\", jsonData.payload.SHA384);\r",
									"    pm.environment.set(\"SHA512\", jsonData.payload.SHA512);\r",
									"    pm.environment.set(\"SM3\", jsonData.payload.SM3);\r",
									"    \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "plain_hex",
									"value": "{{PLAIN_HEX}}",
									"description": "{{PLAIN_HEX}}",
									"type": "text"
								},
								{
									"key": "alg",
									"value": "MD5,,SHA1,    ,    SHA256,SHA384    ,SHA512,SM3,,,",
									"description": "MD5,SHA1,SHA256,SHA384,SHA512,SM3  多个，用逗号分隔",
									"type": "text"
								},
								{
									"key": "key_hex",
									"value": "112233445566",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/crypto/hmac",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"crypto",
								"hmac"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "5. 编解码格式转换",
			"item": [
				{
					"name": "5.1 Base64编码",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"base64 encode Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    pm.globals.set(\"b64_encode_str\", jsonData.payload.encode_str);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "plain_hex",
									"value": "{{PLAIN_HEX}}",
									"description": "16进制的原文数据，二选一",
									"type": "text"
								},
								{
									"key": "plain_str",
									"value": "123456",
									"description": "原文字符串，二选一",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/transcoding/b64/encode",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"transcoding",
								"b64",
								"encode"
							]
						}
					},
					"response": []
				},
				{
					"name": "5.2 Base64解码",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"base64 decode Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    pm.environment.set(\"b64_decode_hex\", jsonData.payload.decode_hex);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "code_str",
									"value": "{{b64_encode_str}}",
									"description": "base64编码字符串",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/transcoding/b64/decode",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"transcoding",
								"b64",
								"decode"
							]
						}
					},
					"response": []
				},
				{
					"name": "5.3 格式化时间字符串转时间戳",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"transcoding str2timestamp Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    pm.globals.set(\"time_stamp\", jsonData.payload.time_stamp);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_BASE}}/transcoding/time/str2timestamp?time_str=2021.01.20 16:38:55",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"transcoding",
								"time",
								"str2timestamp"
							],
							"query": [
								{
									"key": "time_str",
									"value": "2021.01.20 16:38:55",
									"description": "yyyy-MM-dd HH:mm:ss\nyyyy/MM/dd HH:mm:ss\nyyyy.MM.dd HH:mm:ss\nyyyy年MM月dd日 HH:mm:ss"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "5.4 时间戳格式化时间字符串",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"transcoding timestamp2str Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    pm.globals.set(\"time_str\", jsonData.payload.time_str);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_BASE}}/transcoding/time/timestamp2str?time_stamp={{time_stamp_str}}&time_format=yyyy-MM-dd HH:mm:ss",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"transcoding",
								"time",
								"timestamp2str"
							],
							"query": [
								{
									"key": "time_stamp",
									"value": "{{time_stamp_str}}",
									"description": "时间戳格式原文，（1611131930）"
								},
								{
									"key": "time_format",
									"value": "yyyy-MM-dd HH:mm:ss",
									"description": "yyyy-MM-dd HH:mm:ss\nyyyy/MM/dd HH:mm:ss\nyyyy.MM.dd HH:mm:ss\nyyyy年MM月dd日 HH:mm:ss"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "5.5 文字转hex编码",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"transcoding string Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    pm.globals.set(\"hex_str\", jsonData.payload.hexString);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "plain_str",
									"value": "hello world!",
									"type": "text"
								},
								{
									"key": "charset",
									"value": "ISO8859-1",
									"description": "UTF-8,GBK,ISO8859-1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/transcoding/string2hex",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"transcoding",
								"string2hex"
							]
						}
					},
					"response": []
				},
				{
					"name": "5.6 Hex编码转文字",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "plain_hex",
									"value": "{{hex_str}}",
									"type": "text"
								},
								{
									"key": "charset",
									"value": "ISO8859-1",
									"description": "UTF-8,GBK,ISO8859-1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/transcoding/hex2string",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"transcoding",
								"hex2string"
							]
						}
					},
					"response": []
				},
				{
					"name": "5.7 URL编码",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"base64 encode Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    pm.globals.set(\"url_encode_str\", jsonData.payload.encode_str);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "plain_str",
									"value": "http://so.jb51.net/cse/search?q=在线工具&click=1&s=10520733385329581432&nsid=",
									"description": "URL原文字符串",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/transcoding/url/encode",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"transcoding",
								"url",
								"encode"
							]
						}
					},
					"response": []
				},
				{
					"name": "5.8 URL解码",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"url decode Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    pm.globals.set(\"url_decode_str\", jsonData.payload.decode_str);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "code_str",
									"value": "{{url_encode_str}}",
									"description": "url编码字符串",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/transcoding/url/decode",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"transcoding",
								"url",
								"decode"
							]
						}
					},
					"response": []
				},
				{
					"name": "5.9 PEM解析(公私钥、证书)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"transcoding pem-parse Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    // pm.globals.set(\"hexString_hex\", jsonData.payload.hexString_hex);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "pem",
									"value": "-----BEGIN PRIVATE KEY-----\nMIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAL4tQNyKy4U2zX6l\nIZvORB1edmwMwIgSB4cgoFECrG5pixzYxKauZkAwKG9/+L4DB8qXRjfXWcvafcOU\nDlYpRROykJ7wGkiqmqbZyrxY8DWjk5ZZQXiSuhYOAJB+Fyfb11JZV6+CvBQX/1g+\nvhJr39Gmp6oAesoYrj90ecozClmnAgMBAAECgYA3j6sSg+5f9hnldUMzbPjTh8Sb\nXsJlPrc6UFrmMBzGiUleXSpe9Dbla+x0XvQCN4pwMvAN4nnWp/f0Su5BV/9Y93nb\nim5ijGNrfN9i6QrnqGCr+MMute+4E8HR2pCScX0mBLDDf40SmDvMzCaxtd21keyr\n9DqHgInQZNEi6NKlkQJBAPCbUTFg6iQ6VTCQ8CsEf5q2xHhuTK23fJ999lvWVxN7\nQsvWb9RP9Ng34HVtvB7Pl6P7FyHLQYiDJhhvYR0L0+kCQQDKV/09Kt6Wjf5Omp1I\nwd3A+tFnipdqnPw+qNHGjevv0hYiEIWQOYbx00zXgaX+WN/pzV9eeNN2XAxlNJ++\ndxcPAkBrzeuPKFFAcjKBVC+H1rgl5gYZv7Hzk+buv02G0H6rZ+sB0c7BXiHiTwbv\nFn/XfkP/YR14Ms3mEH0dLaphjU8hAkEAh3Ar/rRiN04mCcEuRFQXtaNtZSv8PA2G\nPf7MI2Y9pdHupLCAZlBLRjTUO2/5hu1AO4QPMPIZQSFN3rRBtMCL+wJAMp/m2hvI\nTmtbMp/IrKGfma09e3yFiCmoNn7cHLJ7jLvXcacV2XNzpr9YHfBxiZo0g9FqZKvv\nPZoQ5B2XJ7bhTQ==\n-----END PRIVATE KEY-----",
									"description": "URL原文字符串",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/transcoding/pem-parse",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"transcoding",
								"pem-parse"
							]
						}
					},
					"response": []
				},
				{
					"name": "5.10 生成PEM",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"transcoding generate-pem Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    // pm.globals.set(\"hexString_hex\", jsonData.payload.hexString_hex);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "rsa_p_hex",
									"value": "{{RSA_P}}",
									"type": "text"
								},
								{
									"key": "rsa_q_hex",
									"value": "{{RSA_Q}}",
									"type": "text"
								},
								{
									"key": "rsa_e_hex",
									"value": "{{RSA_E}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/transcoding/generate-pem",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"transcoding",
								"generate-pem"
							]
						}
					},
					"response": []
				},
				{
					"name": "5.11 PEM转成Hex(公私钥、证书)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"transcoding pem2hex Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);    \r",
									"    pm.globals.set(\"pem_hex\", jsonData.payload.pem_hex);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "pem",
									"value": "-----BEGIN PRIVATE KEY-----\nMIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAL4tQNyKy4U2zX6l\nIZvORB1edmwMwIgSB4cgoFECrG5pixzYxKauZkAwKG9/+L4DB8qXRjfXWcvafcOU\nDlYpRROykJ7wGkiqmqbZyrxY8DWjk5ZZQXiSuhYOAJB+Fyfb11JZV6+CvBQX/1g+\nvhJr39Gmp6oAesoYrj90ecozClmnAgMBAAECgYA3j6sSg+5f9hnldUMzbPjTh8Sb\nXsJlPrc6UFrmMBzGiUleXSpe9Dbla+x0XvQCN4pwMvAN4nnWp/f0Su5BV/9Y93nb\nim5ijGNrfN9i6QrnqGCr+MMute+4E8HR2pCScX0mBLDDf40SmDvMzCaxtd21keyr\n9DqHgInQZNEi6NKlkQJBAPCbUTFg6iQ6VTCQ8CsEf5q2xHhuTK23fJ999lvWVxN7\nQsvWb9RP9Ng34HVtvB7Pl6P7FyHLQYiDJhhvYR0L0+kCQQDKV/09Kt6Wjf5Omp1I\nwd3A+tFnipdqnPw+qNHGjevv0hYiEIWQOYbx00zXgaX+WN/pzV9eeNN2XAxlNJ++\ndxcPAkBrzeuPKFFAcjKBVC+H1rgl5gYZv7Hzk+buv02G0H6rZ+sB0c7BXiHiTwbv\nFn/XfkP/YR14Ms3mEH0dLaphjU8hAkEAh3Ar/rRiN04mCcEuRFQXtaNtZSv8PA2G\nPf7MI2Y9pdHupLCAZlBLRjTUO2/5hu1AO4QPMPIZQSFN3rRBtMCL+wJAMp/m2hvI\nTmtbMp/IrKGfma09e3yFiCmoNn7cHLJ7jLvXcacV2XNzpr9YHfBxiZo0g9FqZKvv\nPZoQ5B2XJ7bhTQ==\n-----END PRIVATE KEY-----",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/transcoding/pem2hex",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"transcoding",
								"pem2hex"
							]
						}
					},
					"response": []
				},
				{
					"name": "5.12 Hex转成PEM",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"transcoding hex2pem Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    // pm.globals.set(\"hexString_hex\", jsonData.payload.hexString_hex);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "hex",
									"value": "{{pem_hex}}",
									"type": "text"
								},
								{
									"key": "type",
									"value": "privateKey",
									"description": "publicKey, privateKey, certificate",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/transcoding/hex2pem",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"transcoding",
								"hex2pem"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "6. 其它辅助",
			"item": [
				{
					"name": "6.1 ServerTime 服务器时间",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"systime\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    pm.environment.set(\"time\", jsonData.payload.time);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_BASE}}/aux/system-time",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"aux",
								"system-time"
							]
						}
					},
					"response": []
				},
				{
					"name": "6.2 生成UUID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"uuid\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    pm.environment.set(\"uuid\", jsonData.payload.uuid);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_BASE}}/aux/uuid",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"aux",
								"uuid"
							],
							"query": [
								{
									"key": "simple",
									"value": "1",
									"description": "可选参数，",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "6.3 random生成随机数",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"SM4 generateKey Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    pm.environment.set(\"sm4_crypt_key\", jsonData.payload.key);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_BASE}}/aux/random?size=8",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"aux",
								"random"
							],
							"query": [
								{
									"key": "size",
									"value": "8",
									"description": "取值范围应为1-256字节"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "7. 计算工具",
			"item": [
				{
					"name": "7.1 大数相加",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"calc big number add Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    // pm.environment.set(\"MD5\", jsonData.payload.MD5);\r",
									"   \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "x_hex",
									"value": "112233",
									"description": "被加数，16进制大数，前缀“-”表示负数",
									"type": "text"
								},
								{
									"key": "y_hex",
									"value": "-FE334455",
									"description": "加数，16进制大数，前缀“-”表示负数",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/calc/bn/add",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"calc",
								"bn",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "7.2 大数相减",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"calc big number subtract Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    // pm.environment.set(\"MD5\", jsonData.payload.MD5);\r",
									"   \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "x_hex",
									"value": "112233",
									"description": "被减数，16进制大数，前缀“-”表示负数",
									"type": "text"
								},
								{
									"key": "y_hex",
									"value": "334455",
									"description": "减数，16进制大数，前缀“-”表示负数",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/calc/bn/subtract",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"calc",
								"bn",
								"subtract"
							]
						}
					},
					"response": []
				},
				{
					"name": "7.3 大数相乘",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"calc big number multiply Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    // pm.environment.set(\"MD5\", jsonData.payload.MD5);\r",
									"   \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "x_hex",
									"value": "{{RSA_P}}",
									"description": "被乘数，16进制大数，前缀“-”表示负数",
									"type": "text"
								},
								{
									"key": "y_hex",
									"value": "{{RSA_Q}}",
									"description": "乘数，16进制大数，前缀“-”表示负数",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/calc/bn/multiply",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"calc",
								"bn",
								"multiply"
							]
						}
					},
					"response": []
				},
				{
					"name": "7.4 大数相除",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"calc big number divide Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    // pm.environment.set(\"MD5\", jsonData.payload.MD5);\r",
									"   \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "x_hex",
									"value": "1122332",
									"description": "被除数，16进制大数，前缀“-”表示负数",
									"type": "text"
								},
								{
									"key": "y_hex",
									"value": "334455",
									"description": "除数，16进制大数，前缀“-”表示负数",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/calc/bn/divide",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"calc",
								"bn",
								"divide"
							]
						}
					},
					"response": []
				},
				{
					"name": "7.5 最大公因数",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"calc big number gcd Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    // pm.environment.set(\"MD5\", jsonData.payload.MD5);\r",
									"   \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "x_hex",
									"value": "1122332",
									"description": "16进制大数，前缀“-”表示负数",
									"type": "text"
								},
								{
									"key": "y_hex",
									"value": "334455",
									"description": "16进制大数，前缀“-”表示负数",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/calc/bn/gcd",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"calc",
								"bn",
								"gcd"
							]
						}
					},
					"response": []
				},
				{
					"name": "7.6 大数求模",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"calc big number mod Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    // pm.environment.set(\"MD5\", jsonData.payload.MD5);\r",
									"   \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "x_hex",
									"value": "1122332",
									"description": "16进制大数",
									"type": "text"
								},
								{
									"key": "y_hex",
									"value": "334455",
									"description": "模数，16进制大数",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/calc/bn/mod",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"calc",
								"bn",
								"mod"
							]
						}
					},
					"response": []
				},
				{
					"name": "7.7 模逆",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"calc big number mod-inverse Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    // pm.environment.set(\"MD5\", jsonData.payload.MD5);\r",
									"   \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "x_hex",
									"value": "7333",
									"description": "16进制大数",
									"type": "text"
								},
								{
									"key": "y_hex",
									"value": "9ABCD5",
									"description": "模数，16进制大数",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/calc/bn/mod-inverse",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"calc",
								"bn",
								"mod-inverse"
							]
						}
					},
					"response": []
				},
				{
					"name": "7.8 （x-1）*（y-1）",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"calc big number multiply-1 Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    // pm.environment.set(\"MD5\", jsonData.payload.MD5);\r",
									"   \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "x_hex",
									"value": "{{RSA_P}}",
									"description": "16进制大数",
									"type": "text"
								},
								{
									"key": "y_hex",
									"value": "{{RSA_Q}}",
									"description": "16进制大数",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/calc/bn/multiply-1",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"calc",
								"bn",
								"multiply-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "7.9 模幂",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"calc big number mod-pow Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    // pm.environment.set(\"MD5\", jsonData.payload.MD5);\r",
									"   \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "x_hex",
									"value": "7333",
									"description": "16进制大数",
									"type": "text"
								},
								{
									"key": "y_hex",
									"value": "{{RSA_D}}",
									"description": "幂，16进制大数",
									"type": "text"
								},
								{
									"key": "m_hex",
									"value": "{{RSA_N}}",
									"description": "模数，16进制大数",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/calc/bn/mod-pow",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"calc",
								"bn",
								"mod-pow"
							]
						}
					},
					"response": []
				},
				{
					"name": "7.10 pqe求RSA公私钥",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"calc big number rsa-d Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    // pm.environment.set(\"MD5\", jsonData.payload.MD5);\r",
									"   \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "p_hex",
									"value": "{{RSA_P}}",
									"description": "{{RSA_P}}",
									"type": "text"
								},
								{
									"key": "q_hex",
									"value": "{{RSA_Q}}",
									"description": "{{RSA_Q}}",
									"type": "text"
								},
								{
									"key": "e_hex",
									"value": "{{RSA_E}}",
									"description": "{{RSA_E}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/calc/bn/rsa-d",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"calc",
								"bn",
								"rsa-d"
							]
						}
					},
					"response": []
				},
				{
					"name": "7.11 求商和余",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"calc big number divide-mod Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    // pm.environment.set(\"MD5\", jsonData.payload.MD5);\r",
									"   \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "x_hex",
									"value": "f8cad911fdd737311433dc\n7be0f1171fd9076\t\t443de6162f4759   cd97109dc346aa90a5   db85e0f9dc3f3\na56ec99646fa485f58720f873df5d163efead7be9d8da3",
									"type": "text"
								},
								{
									"key": "y_hex",
									"value": "FE334455",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/calc/bn/divide-mod",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"calc",
								"bn",
								"divide-mod"
							]
						}
					},
					"response": []
				},
				{
					"name": "7.12 大数位与",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"calc big number bit-and Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    // pm.environment.set(\"MD5\", jsonData.payload.MD5);\r",
									"   \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "x_hex",
									"value": "f8cad911fdd737311433dc\n7be0f1171fd9076\t\t443de6162f4759   cd97109dc346aa90a5   db85e0f9dc3f3\na56ec99646fa485f58720f873df5d163efead7be9d8da3",
									"type": "text"
								},
								{
									"key": "y_hex",
									"value": "FE334455",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/calc/bn/bit-and",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"calc",
								"bn",
								"bit-and"
							]
						}
					},
					"response": []
				},
				{
					"name": "7.13 大数位或",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"calc big number bit-or Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    // pm.environment.set(\"MD5\", jsonData.payload.MD5);\r",
									"   \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "x_hex",
									"value": "f8cad911fdd737311433dc\n7be0f1171fd9076\t\t443de6162f4759   cd97109dc346aa90a5   db85e0f9dc3f3\na56ec99646fa485f58720f873df5d163efead7be9d8da3",
									"type": "text"
								},
								{
									"key": "y_hex",
									"value": "FE334455",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/calc/bn/bit-or",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"calc",
								"bn",
								"bit-or"
							]
						}
					},
					"response": []
				},
				{
					"name": "7.14 大数异或",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"calc big number bit-xor Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    // pm.environment.set(\"MD5\", jsonData.payload.MD5);\r",
									"   \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "x_hex",
									"value": "f8cad911fdd737311433dc\n7be0f1171fd9076\t\t443de6162f4759   cd97109dc346aa90a5   db85e0f9dc3f3\na56ec99646fa485f58720f873df5d163efead7be9d8da3",
									"type": "text"
								},
								{
									"key": "y_hex",
									"value": "FE334455",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/calc/bn/bit-xor",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"calc",
								"bn",
								"bit-xor"
							]
						}
					},
					"response": []
				},
				{
					"name": "7.15 大数求反",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"calc big number bit-not Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    // pm.environment.set(\"MD5\", jsonData.payload.MD5);\r",
									"   \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "x_hex",
									"value": "f8cad911fdd737311433dc\n7be0f1171fd9076\t\t443de6162f4759   cd97109dc346aa90a5   db85e0f9dc3f3\na56ec99646fa485f58720f873df5d163efead7be9d8da3",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/calc/bn/bit-not",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"calc",
								"bn",
								"bit-not"
							]
						}
					},
					"response": []
				},
				{
					"name": "7.16 大数开方",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"calc big number sqrt Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    // pm.environment.set(\"MD5\", jsonData.payload.MD5);\r",
									"   \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "x_hex",
									"value": "f8cad911fdd737311433dc\n7be0f1171fd9076\t\t443de6162f4759   cd97109dc346aa90a5   db85e0f9dc3f3\na56ec99646fa485f58720f873df5d163efead7be9d8da3",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/calc/bn/sqrt",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"calc",
								"bn",
								"sqrt"
							]
						}
					},
					"response": []
				},
				{
					"name": "7.17 大数求幂",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"calc big number pow Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    // pm.environment.set(\"MD5\", jsonData.payload.MD5);\r",
									"   \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "x_hex",
									"value": "11223323355112233233551    1223323355",
									"description": "16进制大数",
									"type": "text"
								},
								{
									"key": "y_hex",
									"value": "61",
									"description": "幂次，16进制，不大于0x64（100）",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/calc/bn/pow",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"calc",
								"bn",
								"pow"
							]
						}
					},
					"response": []
				},
				{
					"name": "7.18 质数判断",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"calc big number is-prime Check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(0);\r",
									"    \r",
									"    // pm.environment.set(\"MD5\", jsonData.payload.MD5);\r",
									"   \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "x_hex",
									"value": "f4a1d5ea309a48c7f17f007d8bdb50a5ea1396a79b9a529c936e08af48c3b3160aa760ddd3f50a57c13b7445da4d2aa9eb1b0a7e9d8e1fc3231c44a7561b0905",
									"description": "16进制大数",
									"type": "text"
								},
								{
									"key": "y_hex",
									"value": "61",
									"description": "确定程度（16进制），不大于1000",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_BASE}}/calc/bn/is-prime",
							"host": [
								"{{API_BASE}}"
							],
							"path": [
								"calc",
								"bn",
								"is-prime"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "API_BASE",
			"value": "localhost:10501"
		},
		{
			"key": "PLAIN_HEX",
			"value": "0653F3748DFD938FE83935800FF3F526B85C30C2331DD56FCB1794AA99F2A416"
		},
		{
			"key": "IV",
			"value": "30303030303030303030303030303030"
		},
		{
			"key": "IV8",
			"value": "3030303030303030"
		},
		{
			"key": "IV32",
			"value": "3030303030303030303030303030303030303030303030303030303030303030"
		},
		{
			"key": "IV24",
			"value": "303030303030303030303030303030303030303030303030"
		},
		{
			"key": "SYM_ALG",
			"value": "AES"
		},
		{
			"key": "SYM_MODE",
			"value": "CTR"
		},
		{
			"key": "SYM_PAD",
			"value": "Zero"
		}
	]
}